// –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–≥—Ä–æ–∫–æ–≤
const playerImages = {
    archer: null,
    swordman: null
};

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–≥—Ä–æ–∫–æ–≤
function loadPlayerImages() {
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–≥—Ä–æ–∫–æ–≤...');
    
    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—É—á–Ω–∏–∫–∞
    playerImages.archer = new Image();
    playerImages.archer.src = 'images/archer.png';
    playerImages.archer.onerror = function() {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª—É—á–Ω–∏–∫–∞');
        playerImages.archer = null;
    };
    playerImages.archer.onload = function() {
        console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—É—á–Ω–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    };
    
    // –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—á–Ω–∏–∫–∞
    playerImages.swordman = new Image();
    playerImages.swordman.src = 'images/swordman.png';
    playerImages.swordman.onerror = function() {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—á–Ω–∏–∫–∞');
        playerImages.swordman = null;
    };
    playerImages.swordman.onload = function() {
        console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—á–Ω–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    };
    
    console.log('–ó–∞–ø—Ä–æ—à–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: archer=', playerImages.archer.src, 'swordman=', playerImages.swordman.src);
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if (typeof window !== 'undefined') {
    window.addEventListener('load', loadPlayerImages);
}

// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
class CharacterClass {
    constructor(name, icon, description) {
        this.name = name;
        this.icon = icon;
        this.description = description;
        this.baseStats = {
            maxHealth: 100,
            speed: 720,
            regeneration: 0,
            weaponDamage: 1,
            weaponSpeed: 1,
            armor: 0,
            luck: 0,
            magnet: 0
        };
        this.startingWeapon = Weapon;
        this.specialAbilities = [];
    }

    applyToPlayer(player) {
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫–ª–∞—Å—Å–∞
        Object.keys(this.baseStats).forEach(stat => {
            player.stats[stat] = this.baseStats[stat];
        });
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–µ–π
        this.specialAbilities.forEach(ability => {
            ability.apply(player);
        });
        
        player.health = player.stats.maxHealth;
        player.characterClass = this;
    }
}

// –ö–ª–∞—Å—Å –õ—É—á–Ω–∏–∫
class ArcherClass extends CharacterClass {
    constructor() {
        super('–õ—É—á–Ω–∏–∫', 'üèπ', '–î–∞–ª—å–Ω–∏–π –±–æ–π, –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏, —Å—Ä–µ–¥–Ω—è—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å');
        this.baseStats = {
            maxHealth: 90, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 80 –¥–æ 90 –¥–ª—è –ª—É—á—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            speed: 1600, // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–Ω–∞–º–∏–∫–∏
            regeneration: 1.5, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 1 –¥–æ 1.5
            weaponDamage: 1.3, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 1.2 –¥–æ 1.3
            weaponSpeed: 1.6, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 1.5 –¥–æ 1.6
            armor: 2, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0 –¥–æ 2
            luck: 0.15, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.1 –¥–æ 0.15
            magnet: 15, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 10 –¥–æ 15
            criticalChance: 0.05, // –ë–∞–∑–æ–≤—ã–π —à–∞–Ω—Å –∫—Ä–∏—Ç–∞
            range: 0.2 // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ª—É—á–Ω–∏–∫–∞
        };
        this.startingWeapon = BowWeapon;
        this.specialAbilities = [
            {
                name: '–ë—ã—Å—Ç—Ä—ã–µ —Ä–µ—Ñ–ª–µ–∫—Å—ã',
                description: '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è',
                apply: (player) => {
                    player.stats.speed *= 1.1;
                }
            },
            {
                name: '–ú–µ—Ç–∫–æ—Å—Ç—å',
                description: '–£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏',
                apply: (player) => {
                    player.baseRange = 600; // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å
                }
            }
        ];
    }
}

// –ö–ª–∞—Å—Å –ú–µ—á–Ω–∏–∫
class SwordsmanClass extends CharacterClass {
    constructor() {
        super('–ú–µ—á–Ω–∏–∫', '‚öîÔ∏è', '–ë–ª–∏–∂–Ω–∏–π –±–æ–π, –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω, –±–æ–ª—å—à–∞—è –ø—Ä–æ—á–Ω–æ—Å—Ç—å');
        this.baseStats = {
            maxHealth: 160, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 150 –¥–æ 160
            speed: 1200, // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–Ω–∞–º–∏–∫–∏
            regeneration: 2.5, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 2 –¥–æ 2.5
            weaponDamage: 1.7, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 1.5 –¥–æ 1.7
            weaponSpeed: 0.9, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.8 –¥–æ 0.9
            armor: 8, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 5 –¥–æ 8
            luck: 0.08, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.05 –¥–æ 0.08
            magnet: 8, // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 5 –¥–æ 8
            lifeSteal: 0.03, // –ë–∞–∑–æ–≤—ã–π –≤–∞–º–ø–∏—Ä–∏–∑–º
            thornDamage: 0.1, // –ë–∞–∑–æ–≤–æ–µ –æ—Ç—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–Ω–∞
            berserkerRage: 0.02 // –ë–∞–∑–æ–≤—ã–π –±–µ—Ä—Å–µ—Ä–∫
        };
        this.startingWeapon = SwordWeapon;
        this.specialAbilities = [
            {
                name: '–ë–µ—Ä—Å–µ—Ä–∫',
                description: '–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ',
                apply: (player) => {
                    player.berserkerMode = true;
                }
            },
            {
                name: '–°—Ç–æ–π–∫–æ—Å—Ç—å',
                description: '–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –±—Ä–æ–Ω—è –∏ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
                apply: (player) => {
                    player.stats.armor += 3;
                    player.stats.regeneration += 1;
                }
            }
        ];
    }
}

// –ö–ª–∞—Å—Å –ú–µ—Ç–∞—Ç–µ–ª—å –±–æ–º–±
class BomberClass extends CharacterClass {
    constructor() {
        super('Bomber', 'üí£', 'Long-range explosive attacks, medium speed, powerful blasts');
        this.baseStats = {
            maxHealth: 110, // –°—Ä–µ–¥–Ω—è—è –∂–∏–≤—É—á–µ—Å—Ç—å
            speed: 1300, // –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å
            regeneration: 1.2, // –°—Ä–µ–¥–Ω—è—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
            weaponDamage: 2.0, // –í—ã—Å–æ–∫–∏–π —É—Ä–æ–Ω –æ—Ç –≤–∑—Ä—ã–≤–æ–≤
            weaponSpeed: 1.0, // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∞—Ç–∞–∫–∏
            armor: 3, // –°—Ä–µ–¥–Ω—è—è –±—Ä–æ–Ω—è
            luck: 0.1, // –°—Ä–µ–¥–Ω—è—è —É–¥–∞—á–∞
            magnet: 12, // –°—Ä–µ–¥–Ω–∏–π –º–∞–≥–Ω–µ—Ç–∏–∑–º
            explosionRadius: 1.5, // –ë–∞–∑–æ–≤—ã–π —Ä–∞–¥–∏—É—Å –≤–∑—Ä—ã–≤–∞
            explosionDamage: 1.8, // –ú–Ω–æ–∂–∏—Ç–µ–ª—å —É—Ä–æ–Ω–∞ –≤–∑—Ä—ã–≤–∞
            knockbackPower: 1.2 // –°–∏–ª–∞ –æ—Ç—Ç–∞–ª–∫–∏–≤–∞–Ω–∏—è –æ—Ç –≤–∑—Ä—ã–≤–æ–≤
        };
        this.startingWeapon = BombWeapon;
        this.specialAbilities = [
            {
                name: '–í–∑—Ä—ã–≤—á–∞—Ç–∫–∞',
                description: '–ê—Ç–∞–∫–∏ –Ω–∞–Ω–æ—Å—è—Ç —É—Ä–æ–Ω –ø–æ –æ–±–ª–∞—Å—Ç–∏',
                apply: (player) => {
                    player.hasExplosiveAttacks = true;
                    player.explosionRadius = 80; // –ë–∞–∑–æ–≤—ã–π —Ä–∞–¥–∏—É—Å –≤–∑—Ä—ã–≤–∞
                }
            },
            {
                name: '–ü–æ–¥—Ä—ã–≤–Ω–∏–∫',
                description: '–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω –æ—Ç –≤–∑—Ä—ã–≤–æ–≤',
                apply: (player) => {
                    player.explosionDamageMultiplier = 1.3;
                }
            }
        ];
    }
}

// –û—Ä—É–∂–∏–µ –º–µ—á–Ω–∏–∫–∞
class SwordWeapon extends Weapon {
    constructor(owner) {
        super(owner);
        this.damage = 25;
        this.fireRate = 1.5;
        this.range = 150; // –ë–ª–∏–∂–Ω–∏–π –±–æ–π
        this.projectileSpeed = 0; // –ù–µ –ª–µ—Ç—è—â–∏–π —Å–Ω–∞—Ä—è–¥
        this.projectileLife = 0.3;
        this.name = "–ú–µ—á";
        this.description = "–û—Ä—É–∂–∏–µ –±–ª–∏–∂–Ω–µ–≥–æ –±–æ—è";
        this.projectileType = SwordProjectile;
        this.spread = Math.PI / 6; // –®–∏—Ä–æ–∫–∏–π –≤–∑–º–∞—Ö
        this.slashAngle = 0; // –¢–µ–∫—É—â–∏–π —É–≥–æ–ª –≤–∑–º–∞—Ö–∞
        this.slashStartAngle = 0; // –ù–∞—á–∞–ª—å–Ω—ã–π —É–≥–æ–ª –≤–∑–º–∞—Ö–∞
        this.slashArc = Math.PI / 2; // –î—É–≥–∞ –≤–∑–º–∞—Ö–∞ (90 –≥—Ä–∞–¥—É—Å–æ–≤)
    }

    fire() {
        if (!this.canFire()) return [];

        this.lastFire = 0;
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∑–º–∞—Ö–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–≤–∏–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        let slashDirection = this.owner.facingDirection;
        
        // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è, –≤–∑–º–∞—Ö –≤ —Å—Ç–æ—Ä–æ–Ω—É –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–∞–≥–∞
        if (this.owner.velX === 0 && this.owner.velY === 0) {
            const nearestEnemy = this.findNearestEnemyForDirection();
            if (nearestEnemy) {
                slashDirection = MathUtils.angle(this.owner.x, this.owner.y, nearestEnemy.x, nearestEnemy.y);
            }
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–≥–ª—ã –≤–∑–º–∞—Ö–∞
        this.slashStartAngle = slashDirection - this.slashArc / 2;
        this.slashAngle = this.slashStartAngle;
        
        // –°–æ–∑–¥–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤–∑–º–∞—Ö–∞
        const slashEffect = new SwordSlashEffect(
            this.owner.x,
            this.owner.y,
            this.slashStartAngle,
            this.slashArc,
            this.range,
            this.projectileLife,
            this.damage,
            this.owner
        );
        
        // –°—Ä–∞–∑—É –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω –≤—Å–µ–º –≤—Ä–∞–≥–∞–º –≤ —Ä–∞–¥–∏—É—Å–µ –≤–∑–º–∞—Ö–∞
        this.dealSlashDamage(slashDirection);
        
        return [slashEffect];
    }

    findNearestEnemyForDirection() {
        if (!window.game || !window.game.enemySystem) return null;
        
        // –ò—â–µ–º –≤—Ä–∞–≥–æ–≤ –≤ —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        const enemies = window.game.enemySystem.getEnemiesInRange(
            this.owner.x, 
            this.owner.y, 
            this.range * 2
        );
        
        if (enemies.length === 0) return null;
        
        let nearest = null;
        let minDistance = Infinity;
        
        for (const enemy of enemies) {
            const distance = MathUtils.distance(
                this.owner.x, 
                this.owner.y, 
                enemy.x, 
                enemy.y
            );
            
            if (distance < minDistance) {
                minDistance = distance;
                nearest = enemy;
            }
        }
        
        return nearest;
    }

    dealSlashDamage(slashDirection) {
        if (!window.game || !window.game.enemySystem) return;
        
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ –≤–∑–º–∞—Ö–∞
        const enemies = window.game.enemySystem.getEnemiesInRange(
            this.owner.x, 
            this.owner.y, 
            this.range
        );
        
        for (const enemy of enemies) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤—Ä–∞–≥ –≤ –¥—É–≥–µ –≤–∑–º–∞—Ö–∞
            const enemyAngle = MathUtils.angle(this.owner.x, this.owner.y, enemy.x, enemy.y);
            const angleDiff = MathUtils.normalizeAngle(enemyAngle - slashDirection);
            
            if (Math.abs(angleDiff) <= this.slashArc / 2) {
                // –í—Ä–∞–≥ –≤ –¥—É–≥–µ –≤–∑–º–∞—Ö–∞ - –Ω–∞–Ω–æ—Å–∏–º —É—Ä–æ–Ω
                let damage = this.damage;
                
                // –ü—Ä–∏–º–µ–Ω—è–µ–º –±–µ—Ä—Å–µ—Ä–∫ –º–Ω–æ–∂–∏—Ç–µ–ª—å
                if (this.owner.berserkerMode && this.owner.berserkerMultiplier) {
                    damage *= this.owner.berserkerMultiplier;
                }
                
                enemy.takeDamage(damage);
                
                // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–ø–∞–¥–∞–Ω–∏—è
                if (window.game && window.game.particleSystem) {
                    window.game.particleSystem.createHitEffect(enemy.x, enemy.y);
                }
            }
        }
    }

    // –î–æ–±–∞–≤–ª—è—é –º–µ—Ç–æ–¥ upgrade() –¥–ª—è —É–ª—É—á—à–µ–Ω–∏–π –º–µ—á–∞
    upgrade() {
        this.level++;
        this.damage *= 1.15; // +15% —É—Ä–æ–Ω–∞
        this.fireRate *= 1.1; // +10% —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏
        this.range *= 1.05; // +5% –¥–∞–ª—å–Ω–æ—Å—Ç–∏ (–º–µ–Ω—å—à–µ —á–µ–º —É –æ—Å—Ç–∞–ª—å–Ω—ã—Ö)
        
        // –ö–∞–∂–¥—ã–µ 2 —É—Ä–æ–≤–Ω—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥—É–≥—É –≤–∑–º–∞—Ö–∞
        if (this.level % 2 === 0) {
            this.slashArc = Math.min(this.slashArc * 1.1, Math.PI); // –ú–∞–∫—Å–∏–º—É–º 180¬∞
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if (this.baseDamage === undefined) {
            this.baseDamage = this.damage / 1.15;
        }
        if (this.baseFireRate === undefined) {
            this.baseFireRate = this.fireRate / 1.1;
        }
        if (this.baseRange === undefined) {
            this.baseRange = this.range / 1.05;
        }
    }
}

// –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤–∑–º–∞—Ö–∞ –º–µ—á–∞
class SwordSlashEffect {
    constructor(x, y, startAngle, arc, range, life, damage, owner) {
        this.x = x;
        this.y = y;
        this.startAngle = startAngle;
        this.arc = arc;
        this.range = range;
        this.life = life;
        this.maxLife = life;
        this.damage = damage;
        this.owner = owner;
        this.active = true;
        this.color = '#e6e6fa';
        this.glowColor = '#ffffff';
        this.animationPhase = 0;
    }

    update(deltaTime) {
        if (!this.active) return;

        this.life -= deltaTime;
        if (this.life <= 0) {
            this.active = false;
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∑—É –∞–Ω–∏–º–∞—Ü–∏–∏
        this.animationPhase = 1 - (this.life / this.maxLife);
    }

    render(ctx) {
        if (!this.active) return;

        ctx.save();
        ctx.translate(this.x, this.y);
        
        // –†–∞—Å—á–µ—Ç –∞–ª—å—Ñ–∞-–∫–∞–Ω–∞–ª–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        const alpha = Math.sin(this.animationPhase * Math.PI) * 0.8;
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
        ctx.globalAlpha = alpha;
        ctx.lineWidth = 4;
        ctx.strokeStyle = this.color;
        ctx.fillStyle = this.color;
        
        // –†–∏—Å—É–µ–º –¥—É–≥—É –≤–∑–º–∞—Ö–∞
        ctx.beginPath();
        ctx.arc(0, 0, this.range, this.startAngle, this.startAngle + this.arc);
        ctx.stroke();
        
        // –†–∏—Å—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏–Ω–∏–π –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤–∑–º–∞—Ö–∞
        const numLines = 5;
        for (let i = 0; i < numLines; i++) {
            const angle = this.startAngle + (this.arc / numLines) * i;
            const innerRadius = this.range * 0.3;
            const outerRadius = this.range * (0.8 + this.animationPhase * 0.2);
            
            const x1 = Math.cos(angle) * innerRadius;
            const y1 = Math.sin(angle) * innerRadius;
            const x2 = Math.cos(angle) * outerRadius;
            const y2 = Math.sin(angle) * outerRadius;
            
            ctx.beginPath();
            ctx.moveTo(x1, y1);
            ctx.lineTo(x2, y2);
            ctx.stroke();
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
        ctx.shadowColor = this.glowColor;
        ctx.shadowBlur = 15;
        ctx.globalAlpha = alpha * 0.5;
        
        ctx.beginPath();
        ctx.arc(0, 0, this.range, this.startAngle, this.startAngle + this.arc);
        ctx.stroke();
        
        ctx.restore();
    }

    isOffScreen(width, height) {
        return false; // –≠—Ñ—Ñ–µ–∫—Ç –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∏–≥—Ä–æ–∫—É
    }
}

// –°–Ω–∞—Ä—è–¥ –º–µ—á–∞ (–≤–∑–º–∞—Ö) - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
class SwordProjectile extends Projectile {
    constructor(x, y, velX, velY, damage, life, owner) {
        super(x, y, velX, velY, damage, life, owner);
        this.size = 20;
        this.color = '#silver';
        this.piercing = 3; // –ú–æ–∂–µ—Ç –ø—Ä–æ–±–∏–≤–∞—Ç—å –≤—Ä–∞–≥–æ–≤
        this.width = 40;
        this.height = 8;
    }

    render(ctx) {
        if (!this.active) return;

        ctx.save();
        ctx.translate(this.x, this.y);
        ctx.rotate(this.angle);
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–∑–º–∞—Ö–∞ –º–µ—á–∞
        ctx.fillStyle = this.color;
        ctx.fillRect(-this.width/2, -this.height/2, this.width, this.height);
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
        ctx.shadowColor = this.color;
        ctx.shadowBlur = 10;
        ctx.fillRect(-this.width/2, -this.height/2, this.width, this.height);
        
        ctx.restore();
    }
}

// –°–∏—Å—Ç–µ–º–∞ –∑–æ–ª–æ—Ç–∞
class GoldSystem {
    constructor() {
        this.gold = this.loadGold();
        this.goldEarned = 0;
    }

    addGold(amount) {
        this.gold += amount;
        this.goldEarned += amount;
        this.saveGold();
        this.updateDisplay();
    }

    spendGold(amount) {
        if (this.gold >= amount) {
            this.gold -= amount;
            this.saveGold();
            this.updateDisplay();
            return true;
        }
        return false;
    }

    getGold() {
        return this.gold;
    }

    saveGold() {
        window.userManager.setUserData('gold', this.gold);
    }

    loadGold() {
        return window.userManager.getUserData('gold', 0);
    }

    updateDisplay() {
        const goldDisplay = document.getElementById('goldAmount');
        const gameGoldDisplay = document.getElementById('gameGold');
        
        if (goldDisplay) {
            goldDisplay.textContent = this.gold;
        }
        
        if (gameGoldDisplay) {
            gameGoldDisplay.textContent = this.goldEarned;
        }
    }

    reset() {
        this.goldEarned = 0;
        this.updateDisplay();
    }
}

// –°–∏—Å—Ç–µ–º–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
class PermanentUpgradesSystem {
    constructor() {
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π
        this.upgradeDefinitions = {
            vitality: {
                name: 'vitality',
                description: 'vitality',
                icon: '‚ù§Ô∏è',
                baseCost: 25,
                maxLevel: 25,
                effect: (level) => ({ maxHealth: 10 * level })
            },
            agility: {
                name: 'agility',
                description: 'agility',
                icon: 'üèÉ',
                baseCost: 30,
                maxLevel: 20,
                effect: (level) => ({ speed: 15 * level })
            },
            damage: {
                name: 'damage',
                description: 'damage',
                icon: '‚öîÔ∏è',
                baseCost: 35,
                maxLevel: 15,
                effect: (level) => ({ weaponDamage: 0.08 * level })
            },
            defense: {
                name: 'defense',
                description: 'defense',
                icon: 'üõ°Ô∏è',
                baseCost: 40,
                maxLevel: 30,
                effect: (level) => ({ armor: 1 * level })
            },
            recovery: {
                name: 'recovery',
                description: 'recovery',
                icon: 'üîÑ',
                baseCost: 50,
                maxLevel: 20,
                effect: (level) => ({ regeneration: 0.5 * level })
            },
            fortune: {
                name: 'fortune',
                description: 'fortune',
                icon: 'üçÄ',
                baseCost: 60,
                maxLevel: 10,
                effect: (level) => ({ luck: 0.05 * level })
            },
            magnetism: {
                name: 'magnetism',
                description: 'magnetism',
                icon: 'üß≤',
                baseCost: 75,
                maxLevel: 15,
                effect: (level) => ({ magnet: 10 * level }) // –ë—ã–ª–æ 25
            },
            swiftness: {
                name: 'swiftness',
                description: 'swiftness',
                icon: '‚ö°',
                baseCost: 45,
                maxLevel: 15,
                effect: (level) => ({ weaponSpeed: 0.08 * level }) // –ë—ã–ª–æ 0.15
            },
            precision: {
                name: 'precision',
                description: 'precision',
                icon: 'üéØ',
                baseCost: 80,
                maxLevel: 10,
                effect: (level) => ({ criticalChance: 0.02 * level }) // –ë—ã–ª–æ 0.05
            },
            vampirism: {
                name: 'vampirism',
                description: 'vampirism',
                icon: 'üßõ',
                baseCost: 100,
                maxLevel: 10,
                effect: (level) => ({ lifeSteal: 0.01 * level }) // –ë—ã–ª–æ 0.02
            },
            multishot: {
                name: 'multishot',
                description: 'multishot',
                icon: 'üî´',
                baseCost: 120,
                maxLevel: 8,
                effect: (level) => ({ multishotChance: 0.05 * level }) // –ë—ã–ª–æ 0.1
            },
            explosive: {
                name: 'explosive',
                description: 'explosive',
                icon: 'üí£',
                baseCost: 140,
                maxLevel: 8,
                effect: (level) => ({ explosiveChance: 0.04 * level }) // –ë—ã–ª–æ 0.08
            },
            thorns: {
                name: 'thorns',
                description: 'thorns',
                icon: 'üåµ',
                baseCost: 110,
                maxLevel: 10,
                effect: (level) => ({ thornDamage: 0.08 * level }) // –ë—ã–ª–æ 0.15
            },
            dodge: {
                name: 'dodge',
                description: 'dodge',
                icon: 'üí®',
                baseCost: 150,
                maxLevel: 10,
                effect: (level) => ({ dodgeChance: 0.01 * level }) // –ë—ã–ª–æ 0.03
            },
            piercing: {
                name: 'piercing',
                description: 'piercing',
                icon: 'üèπ',
                baseCost: 90,
                maxLevel: 5,
                effect: (level) => ({ piercing: 1 * level })
            },
            velocity: {
                name: 'projectileSpeed',
                description: 'projectileSpeed',
                icon: 'üöÄ',
                baseCost: 70,
                maxLevel: 10,
                effect: (level) => ({ projectileSpeed: 0.1 * level })
            },
            goldRush: {
                name: 'goldRush',
                description: 'goldRush',
                icon: 'üí∞',
                baseCost: 130,
                maxLevel: 8,
                effect: (level) => ({ goldBonus: 0.08 * level })
            },
            berserker: {
                name: 'berserker',
                description: 'berserker',
                icon: 'üò§',
                baseCost: 160,
                maxLevel: 8,
                effect: (level) => ({ berserkerRage: 0.02 * level })
            },
            frost: {
                name: 'frost',
                description: 'frost',
                icon: '‚ùÑÔ∏è',
                baseCost: 170,
                maxLevel: 8,
                effect: (level) => ({ frostAura: 0.04 * level })
            },
            poison: {
                name: 'poison',
                description: 'poison',
                icon: '‚ò†Ô∏è',
                baseCost: 180,
                maxLevel: 10,
                effect: (level) => ({ poisonTrail: 2 * level }) // –ë—ã–ª–æ 5
            },
            shielding: {
                name: 'shielding',
                description: 'shielding',
                icon: 'üõ°Ô∏è',
                baseCost: 190,
                maxLevel: 8,
                effect: (level) => ({ shield: 10 * level }) // –ë—ã–ª–æ 25
            },
            timeWarp: {
                name: 'timeWarp',
                description: 'timeWarp',
                icon: '‚è≥',
                baseCost: 200,
                maxLevel: 5,
                effect: (level) => ({ timeWarpChance: 0.01 * level }) // –ë—ã–ª–æ 0.02
            },
            weaponSlots: {
                name: 'weaponSlots',
                description: 'weaponSlots',
                icon: 'üîß',
                baseCost: 250,
                maxLevel: 3,
                effect: (level) => ({ weaponSlots: 1 * level })
            },
            rangeBoost: {
                name: 'rangeBoost',
                description: 'rangeBoost',
                icon: 'üéØ',
                baseCost: 65,
                maxLevel: 12,
                effect: (level) => ({ range: 0.08 * level }) // –ë—ã–ª–æ 0.15
            },
            adrenaline: {
                name: 'adrenaline',
                description: 'adrenaline',
                icon: 'üíä',
                baseCost: 95,
                maxLevel: 6,
                effect: (level) => ({ adrenalineBoost: 0.05 * level }) // –ë—ã–ª–æ 0.1
            },
            ricochet: {
                name: 'ricochet',
                description: 'ricochet',
                icon: 'üé±',
                baseCost: 125,
                maxLevel: 6,
                effect: (level) => ({ ricochetChance: 0.04 * level }) // –ë—ã–ª–æ 0.08
            },
            elementalDamage: {
                name: 'elementalDamage',
                description: 'elementalDamage',
                icon: 'üî•',
                baseCost: 180,
                maxLevel: 8,
                effect: (level) => ({ elementalDamage: 0.06 * level }) // –ë—ã–ª–æ 0.12
            },
            vampiricAura: {
                name: 'vampiricAura',
                description: 'vampiricAura',
                icon: 'üßõ',
                baseCost: 220,
                maxLevel: 5,
                effect: (level) => ({ vampiricAura: 1 * level }) // –ë—ã–ª–æ 2
            }
        };
        
        // –ó–∞—Ç–µ–º –∑–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        this.upgrades = this.loadUpgrades();
    }

    getUpgradeLevel(upgradeId) {
        return this.upgrades[upgradeId] || 0;
    }

    getUpgradeCost(upgradeId) {
        const def = this.upgradeDefinitions[upgradeId];
        const level = this.getUpgradeLevel(upgradeId);
        return Math.floor(def.baseCost * Math.pow(1.5, level));
    }

    canUpgrade(upgradeId) {
        const def = this.upgradeDefinitions[upgradeId];
        const level = this.getUpgradeLevel(upgradeId);
        return level < def.maxLevel;
    }

    purchaseUpgrade(upgradeId, goldSystem) {
        if (!this.canUpgrade(upgradeId)) return false;
        
        const cost = this.getUpgradeCost(upgradeId);
        if (goldSystem.spendGold(cost)) {
            this.upgrades[upgradeId] = this.getUpgradeLevel(upgradeId) + 1;
            this.saveUpgrades();
            return true;
        }
        return false;
    }

    applyUpgrades(player) {
        Object.keys(this.upgrades).forEach(upgradeId => {
            const level = this.upgrades[upgradeId];
            const def = this.upgradeDefinitions[upgradeId];
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
            if (!def) {
                console.warn(`–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–∏—è "${upgradeId}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
                return;
            }
            
            if (level > 0) {
                try {
                const effects = def.effect(level);
                Object.keys(effects).forEach(stat => {
                    if (stat === 'maxHealth') {
                        player.stats[stat] += effects[stat];
                        player.health = Math.min(player.health + effects[stat], player.stats.maxHealth);
                    } else {
                        player.stats[stat] += effects[stat];
                    }
                });
                } catch (error) {
                    console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —É–ª—É—á—à–µ–Ω–∏—è "${upgradeId}":`, error);
                }
            }
        });
    }

    getAllUpgrades() {
        return Object.keys(this.upgradeDefinitions).map(id => {
            const def = this.upgradeDefinitions[id];
            let effect = '';
            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ
            if (id === 'vitality') effect = '+10 health';
            else if (id === 'agility') effect = '+15 speed';
            else if (id === 'damage') effect = '+8% damage';
            else if (id === 'defense') effect = '+1 armor';
            else if (id === 'recovery') effect = '+0.5 regen';
            else if (id === 'fortune') effect = '+5% exp';
            else if (id === 'magnetism') effect = '+10 radius';
            else if (id === 'swiftness') effect = '+8% attack speed';
            else if (id === 'precision') effect = '+2% crit';
            else if (id === 'vampirism') effect = '+1% lifesteal';
            else if (id === 'multishot') effect = '+5% chance';
            else if (id === 'explosive') effect = '+4% chance';
            else if (id === 'thorns') effect = '+8% reflect';
            else if (id === 'dodge') effect = '+1% chance';
            else if (id === 'piercing') effect = '+1 pierce';
            else if (id === 'projectileSpeed') effect = '+10% speed';
            else if (id === 'goldRush') effect = '+8% gold';
            else if (id === 'berserker') effect = '+2% damage';
            else if (id === 'frost') effect = '+4% chance';
            else if (id === 'poison') effect = '+2 damage';
            else if (id === 'shielding') effect = '+10 shield';
            else if (id === 'timeWarp') effect = '+1% chance';
            else if (id === 'weaponSlots') effect = '+1 slot';
            else if (id === 'rangeBoost') effect = '+8% range';
            else if (id === 'adrenaline') effect = '+5% speed';
            else if (id === 'ricochet') effect = '+4% chance';
            else if (id === 'elementalDamage') effect = '+6% damage';
            else if (id === 'vampiricAura') effect = '+1 health';
            
            return {
                id,
                ...def,
            level: this.getUpgradeLevel(id),
            cost: this.getUpgradeCost(id),
                canUpgrade: this.canUpgrade(id),
                effect: effect
            };
        });
    }

    loadUpgrades() {
        let upgrades = window.userManager.getUserData('permanent_upgrades', {});
        
        // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –∏–º—ë–Ω —É–ª—É—á—à–µ–Ω–∏–π –∫ –Ω–æ–≤—ã–º
        const migrations = {
            'healthBoost': 'vitality',
            'speedBoost': 'agility',
            'damageBoost': 'damage',
            'armorBoost': 'defense',
            'regenBoost': 'recovery',
            'xpBoost': 'fortune',
            'berserk': 'berserker',
            'velocity': 'projectileSpeed'
        };
        
        let migrated = false;
        Object.keys(migrations).forEach(oldName => {
            if (upgrades[oldName]) {
                const newName = migrations[oldName];
                if (!upgrades[newName]) {
                    upgrades[newName] = upgrades[oldName];
                    console.log(`–ú–∏–≥—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏—è: ${oldName} ‚Üí ${newName}`);
                }
                delete upgrades[oldName];
                migrated = true;
            }
        });
        
        // –û—á–∏—Å—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π
        let cleaned = false;
        Object.keys(upgrades).forEach(upgradeId => {
            if (!this.upgradeDefinitions[upgradeId]) {
                console.log(`–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è: ${upgradeId}`);
                delete upgrades[upgradeId];
                cleaned = true;
            }
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if (migrated || cleaned) {
            this.saveUpgrades(upgrades);
            console.log('–î–∞–Ω–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
        }
        
        return upgrades;
    }
    
    saveUpgrades(upgrades = null) {
        const dataToSave = upgrades || this.upgrades;
        window.userManager.setUserData('permanent_upgrades', dataToSave);
    }
}

// –ö–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞
class Player {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.velX = 0;
        this.velY = 0;
        this.maxHealth = 100;
        this.health = this.maxHealth;
        this.speed = 1440; // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–Ω–∞–º–∏–∫–∏
        this.size = 42; // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 1.4 —Ä–∞–∑–∞ —Å 30 –¥–æ 42
        this.color = '#00ff00';
        this.level = 1;
        this.experience = 0;
        this.experienceToNext = 100;
        this.active = true;
        this.invulnerable = false;
        this.invulnerabilityTime = 0;
        this.invulnerabilityDuration = 1;
        this.flashTime = 0;
        this.animationTime = 0;
        this.regeneration = 0;
        this.regenerationRate = 0;
        this.lastRegen = 0;
        
        // –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
        this.stats = {
            maxHealth: 100,
            speed: 1440, // –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 2 —Ä–∞–∑–∞ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–Ω–∞–º–∏–∫–∏
            regeneration: 0,
            weaponDamage: 1,
            weaponSpeed: 1,
            armor: 0,
            luck: 0,
            magnet: 0,
            // –ù–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            criticalChance: 0,
            lifeSteal: 0,
            multishotChance: 0,
            explosiveChance: 0,
            thornDamage: 0,
            dodgeChance: 0,
            piercing: 0,
            projectileSpeed: 0,
            goldBonus: 0,
            berserkerRage: 0,
            frostAura: 0,
            poisonTrail: 0,
            shield: 0,
            timeWarpChance: 0,
            weaponSlots: 0,
            range: 0,
            adrenalineBoost: 0,
            ricochetChance: 0,
            elementalDamage: 0,
            vampiricAura: 0
        };
        
        // –£–ª—É—á—à–µ–Ω–∏—è
        this.upgrades = {
            vitality: 0,
            agility: 0,
            damage: 0,
            defense: 0,
            recovery: 0,
            fortune: 0,
            magnetism: 0,
            swiftness: 0,
            precision: 0,
            vampirism: 0,
            multishot: 0,
            explosive: 0,
            thorns: 0,
            dodge: 0,
            piercing: 0,
            velocity: 0,
            goldRush: 0,
            berserk: 0,
            frost: 0,
            poison: 0,
            shielding: 0,
            timeWarp: 0,
            weaponSlots: 0,
            rangeBoost: 0,
            adrenaline: 0,
            ricochet: 0,
            elementalDamage: 0,
            vampiricAura: 0
        };
        
        this.friction = 0.85;
        this.inputManager = null;
        this.weapons = [];
        this.collectRadius = 30;
        this.facingDirection = 0;
        this.baseRange = 500;
        this.characterClass = null;
        this.berserkerMode = false;
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
        this.visualEffects = {
            invincibility: {
                active: false,
                timeLeft: 0,
                color: '#f1c40f',
                pulseIntensity: 0.5
            },
            magnet: {
                active: false,
                timeLeft: 0,
                color: '#3498db',
                radius: 100
            },
            nuke: {
                active: false,
                timeLeft: 0,
                color: '#e74c3c'
            }
        };
    }

    setCharacterClass(characterClass) {
        console.log('Player.setCharacterClass:', characterClass.name);
        this.characterClass = characterClass;
        characterClass.applyToPlayer(this);
        console.log('–ö–ª–∞—Å—Å –ø—Ä–∏–º–µ–Ω–µ–Ω –∫ –∏–≥—Ä–æ–∫—É:', this.characterClass.name);
    }

    setInputManager(inputManager) {
        this.inputManager = inputManager;
    }

    update(deltaTime) {
        if (!this.active) return;

        this.animationTime += deltaTime;
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤
        if (this.invulnerable) {
            this.invulnerabilityTime -= deltaTime;
            if (this.invulnerabilityTime <= 0) {
                this.invulnerable = false;
            }
        }

        if (this.flashTime > 0) {
            this.flashTime -= deltaTime;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        this.updateVisualEffects(deltaTime);

        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        this.handleInput(deltaTime);

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–∑–∏–∫–∏
        this.velX *= this.friction;
        this.velY *= this.friction;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        this.x += this.velX * deltaTime;
        this.y += this.velY * deltaTime;

        // –†–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è
        this.handleRegeneration(deltaTime);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–∑–≥–ª—è–¥–∞
        this.updateFacingDirection();

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        this.collectNearbyItems();

        // –ë–µ—Ä—Å–µ—Ä–∫ –º–æ–¥ –¥–ª—è –º–µ—á–Ω–∏–∫–∞
        if (this.berserkerMode) {
            const healthPercent = this.health / this.stats.maxHealth;
            if (healthPercent < 0.5) {
                // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –ø—Ä–∏ –Ω–∏–∑–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ
                this.berserkerMultiplier = 1 + (1 - healthPercent);
            } else {
                this.berserkerMultiplier = 1;
            }
        }
    }

    handleInput(deltaTime) {
        if (!this.inputManager) return;

        let moveX = 0;
        let moveY = 0;

        if (this.inputManager.isKeyPressed('w') || this.inputManager.isKeyPressed('arrowup')) {
            moveY = -1;
        }
        if (this.inputManager.isKeyPressed('s') || this.inputManager.isKeyPressed('arrowdown')) {
            moveY = 1;
        }
        if (this.inputManager.isKeyPressed('a') || this.inputManager.isKeyPressed('arrowleft')) {
            moveX = -1;
        }
        if (this.inputManager.isKeyPressed('d') || this.inputManager.isKeyPressed('arrowright')) {
            moveX = 1;
        }
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à–∏ E –¥–ª—è —Å–±–æ—Ä–∞ –±–æ–Ω—É—Å–æ–≤
        if (this.inputManager.isKeyJustPressed('e')) {
            this.collectPowerUps();
        }

        // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏–∞–≥–æ–Ω–∞–ª—å–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
        if (moveX !== 0 && moveY !== 0) {
            moveX *= 0.707;
            moveY *= 0.707;
        }

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è
        const currentSpeed = this.stats.speed;
        this.velX += moveX * currentSpeed * deltaTime;
        this.velY += moveY * currentSpeed * deltaTime;
    }

    updateFacingDirection() {
        if (this.velX !== 0 || this.velY !== 0) {
            this.facingDirection = Math.atan2(this.velY, this.velX);
        }
    }

    handleRegeneration(deltaTime) {
        if (this.stats.regeneration > 0 && this.health < this.stats.maxHealth) {
            this.lastRegen += deltaTime;
            if (this.lastRegen >= 1) {
                this.heal(this.stats.regeneration);
                this.lastRegen = 0;
            }
        }
    }

    collectNearbyItems() {
        if (!window.game || !window.game.itemSystem) return;

        const items = window.game.itemSystem.getItemsInRange(
            this.x, this.y, this.collectRadius + this.stats.magnet
        );

        for (const item of items) {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø—ã—Ç, –Ω–µ –±–æ–Ω—É—Å—ã
            if (item.active && !(item instanceof PowerUp)) {
                item.collect(this);
            }
        }
    }
    
    // –ú–µ—Ç–æ–¥ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –±–æ–Ω—É—Å–æ–≤ (–ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ E)
    collectPowerUps() {
        if (!window.game || !window.game.itemSystem) return;

        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Ä–∞–¥–∏—É—Å –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –±–æ–Ω—É—Å–æ–≤
        const collectRadius = this.collectRadius * 2; 
        
        const powerUps = window.game.itemSystem.items.filter(item => 
            item instanceof PowerUp && 
            item.active && 
            MathUtils.distance(this.x, this.y, item.x, item.y) <= collectRadius
        );

        // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –±–æ–Ω—É—Å, —Å–æ–±–∏—Ä–∞–µ–º –µ–≥–æ
        if (powerUps.length > 0) {
            // –ë–µ—Ä–µ–º –±–ª–∏–∂–∞–π—à–∏–π –±–æ–Ω—É—Å
            powerUps.sort((a, b) => {
                const distA = MathUtils.distance(this.x, this.y, a.x, a.y);
                const distB = MathUtils.distance(this.x, this.y, b.x, b.y);
                return distA - distB;
            });
            
            const nearestPowerUp = powerUps[0];
            nearestPowerUp.collect(this);
            return true;
        }
        
        return false;
    }

    render(ctx) {
        if (!this.active) return;

        ctx.save();
        
        // –≠—Ñ—Ñ–µ–∫—Ç –º–∏–≥–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if (this.invulnerable && this.flashTime > 0) {
            ctx.globalAlpha = 0.5;
        }

        // –ë–µ—Ä—Å–µ—Ä–∫ —ç—Ñ—Ñ–µ–∫—Ç
        if (this.berserkerMode && this.berserkerMultiplier > 1) {
            ctx.shadowColor = '#ff0000';
            ctx.shadowBlur = 15;
        }

        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞
        ctx.translate(this.x, this.y);
        ctx.rotate(this.facingDirection);
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        this.renderVisualEffects(ctx);
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∞
        let playerImage = null;
        if (this.characterClass) {
            if (this.characterClass.name === '–õ—É—á–Ω–∏–∫' && playerImages.archer) {
                playerImage = playerImages.archer;
                if (!playerImage.complete) {
                    console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª—É—á–Ω–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
                }
            } else if (this.characterClass.name === '–ú–µ—á–Ω–∏–∫' && playerImages.swordman) {
                playerImage = playerImages.swordman;
                if (!playerImage.complete) {
                    console.log('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—á–Ω–∏–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
                }
            }
            
            if (this.characterClass.name === '–ú–µ—á–Ω–∏–∫') {
                console.log('–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ—á–Ω–∏–∫–∞:', playerImage ? '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ' : '–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            }
        }
        
        if (playerImage) {
            // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ctx.drawImage(
                playerImage,
                -this.size / 2,
                -this.size / 2,
                this.size,
                this.size
            );
        } else {
            // Fallback - —Ü–≤–µ—Ç–Ω–æ–π –∫–≤–∞–¥—Ä–∞—Ç
        if (this.characterClass) {
            if (this.characterClass.name === '–õ—É—á–Ω–∏–∫') {
                ctx.fillStyle = '#00ff00';
            } else if (this.characterClass.name === '–ú–µ—á–Ω–∏–∫') {
                ctx.fillStyle = '#ff6600';
            }
        } else {
            ctx.fillStyle = this.color;
        }
        
        ctx.fillRect(-this.size / 2, -this.size / 2, this.size, this.size);
        
        // –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∑–≥–ª—è–¥–∞
        ctx.fillStyle = '#ffffff';
        ctx.fillRect(this.size / 4, -this.size / 6, this.size / 3, this.size / 3);
        }

        // –†–∞–¥–∏—É—Å —Å–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        if (window.game && window.game.debug) {
            ctx.strokeStyle = '#00ff0033';
            ctx.lineWidth = 2;
            ctx.beginPath();
            ctx.arc(0, 0, this.collectRadius + this.stats.magnet, 0, Math.PI * 2);
            ctx.stroke();
        }

        // –†–∞–¥–∏—É—Å –∞—Ç–∞–∫–∏ –¥–ª—è –ª—É—á–Ω–∏–∫–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        if (window.game && window.game.debug && this.characterClass && this.characterClass.name === '–õ—É—á–Ω–∏–∫') {
            if (window.game.weaponSystem && window.game.weaponSystem.weapons.length > 0) {
                const weapon = window.game.weaponSystem.weapons[0];
                ctx.strokeStyle = '#ff000055';
                ctx.lineWidth = 3;
                ctx.beginPath();
                ctx.arc(0, 0, weapon.range, 0, Math.PI * 2);
                ctx.stroke();
            }
        }

        ctx.restore();
    }

    // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    renderVisualEffects(ctx) {
        // –≠—Ñ—Ñ–µ–∫—Ç –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if (this.visualEffects.invincibility.active) {
            const effect = this.visualEffects.invincibility;
            const pulseSize = this.size * (1 + Math.sin(this.animationTime * 5) * 0.2);
            
            ctx.save();
            ctx.globalAlpha = 0.5;
            ctx.strokeStyle = effect.color;
            ctx.lineWidth = 3;
            ctx.beginPath();
            ctx.arc(0, 0, pulseSize / 2, 0, Math.PI * 2);
            ctx.stroke();
            
            // –°–≤–µ—á–µ–Ω–∏–µ
            ctx.shadowColor = effect.color;
            ctx.shadowBlur = 15;
            ctx.beginPath();
            ctx.arc(0, 0, pulseSize / 2.5, 0, Math.PI * 2);
            ctx.stroke();
            ctx.restore();
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç –º–∞–≥–Ω–∏—Ç–∞
        if (this.visualEffects.magnet.active) {
            const effect = this.visualEffects.magnet;
            const radius = effect.radius + Math.sin(this.animationTime * 3) * 10;
            
            ctx.save();
            ctx.globalAlpha = 0.3;
            ctx.strokeStyle = effect.color;
            ctx.lineWidth = 2;
            
            // –ö—Ä—É–≥–æ–≤–æ–π —ç—Ñ—Ñ–µ–∫—Ç
            ctx.beginPath();
            ctx.arc(0, 0, radius, 0, Math.PI * 2);
            ctx.stroke();
            
            // –õ–∏–Ω–∏–∏ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è
            const lineCount = 8;
            for (let i = 0; i < lineCount; i++) {
                const angle = (i / lineCount) * Math.PI * 2;
                const innerRadius = radius * 0.7;
                const outerRadius = radius;
                
                ctx.beginPath();
                ctx.moveTo(Math.cos(angle) * innerRadius, Math.sin(angle) * innerRadius);
                ctx.lineTo(Math.cos(angle) * outerRadius, Math.sin(angle) * outerRadius);
                ctx.stroke();
            }
            
            ctx.restore();
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç —è–¥–µ—Ä–Ω–æ–≥–æ –≤–∑—Ä—ã–≤–∞ (nuke)
        if (this.visualEffects.nuke.active) {
            const effect = this.visualEffects.nuke;
            const timeLeft = effect.timeLeft;
            
            if (timeLeft < 0.5) {  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤ –Ω–∞—á–∞–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
                const radius = 800 * (1 - timeLeft * 2);  // –†–∞—Å—à–∏—Ä—è—é—â–∏–π—Å—è —Ä–∞–¥–∏—É—Å
                
                ctx.save();
                ctx.globalAlpha = 0.3 * (1 - timeLeft * 2);
                ctx.fillStyle = effect.color;
                
                // –ö—Ä—É–≥–æ–≤–∞—è –≤–æ–ª–Ω–∞
                ctx.beginPath();
                ctx.arc(0, 0, radius, 0, Math.PI * 2);
                ctx.fill();
                
                // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –≤–æ–ª–Ω–∞
                ctx.globalAlpha = 0.5 * (1 - timeLeft * 2);
                ctx.beginPath();
                ctx.arc(0, 0, radius * 0.8, 0, Math.PI * 2);
                ctx.fill();
                
                ctx.restore();
            }
        }
    }
    
    takeDamage(damage) {
        if (this.invulnerable || !this.active) return;

        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±—Ä–æ–Ω–∏
        const actualDamage = Math.max(1, damage - this.stats.armor);
        this.health -= actualDamage;
        
        // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏
        this.invulnerable = true;
        this.invulnerabilityTime = this.invulnerabilityDuration;
        this.flashTime = 0.1;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏
        if (this.health <= 0) {
            this.die();
        }
    }

    heal(amount) {
        const oldHealth = this.health;
        this.health = Math.min(this.stats.maxHealth, this.health + amount);
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ª–µ—á–µ–Ω–∏—è
        if (this.health > oldHealth && window.game && window.game.particleSystem) {
            const emitter = window.game.particleSystem.createLevelUpEffect(this.x, this.y);
            emitter.colors = ['#00ff00', '#44ff44', '#88ff88'];
            emitter.duration = 0.2;
        }
    }

    die() {
        this.active = false;
        this.health = 0;
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–º–µ—Ä—Ç–∏
        if (window.game && window.game.particleSystem) {
            window.game.particleSystem.createExplosion(this.x, this.y);
        }

        // –ö–æ–Ω–µ—Ü –∏–≥—Ä—ã
        if (window.game) {
            window.game.endGame();
        }
    }

    gainExperience(amount) {
        // –û–∫—Ä—É–≥–ª—è–µ–º –æ–ø—ã—Ç –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π
        this.experience = Math.floor((this.experience + amount * (1 + this.stats.luck * 0.1)) * 100) / 100;
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        while (this.experience >= this.experienceToNext) {
            this.levelUp();
        }
    }

    levelUp() {
        this.level++;
        this.experience -= this.experienceToNext;
        // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
        this.experience = Math.floor(this.experience);
        this.experienceToNext = Math.floor(this.experienceToNext * 1.2);
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø–æ–≤—ã—à–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è
        if (window.game && window.game.particleSystem) {
            window.game.particleSystem.createLevelUpEffect(this.x, this.y);
        }

        // –ù–µ–±–æ–ª—å—à–æ–µ –ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è
        this.heal(this.stats.maxHealth * 0.1);

        // –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏–π
        if (window.game) {
            window.game.showLevelUpMenu();
        }
    }

    applyUpgrade(upgradeType) {
        this.upgrades[upgradeType]++;
        
        // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π
        switch (upgradeType) {
            case 'vitality':
            case 'healthBoost':
                this.stats.maxHealth += 10;
                this.heal(10);
                break;
            case 'agility':
            case 'speedBoost':
                this.stats.speed += 15;
                break;
            case 'recovery':
            case 'regenBoost':
                this.stats.regeneration += 0.5;
                break;
            case 'damage':
            case 'damageBoost':
                this.stats.weaponDamage += 0.08;
                break;
            case 'swiftness':
            case 'fireRateBoost':
                this.stats.weaponSpeed += 0.08;
                break;
            case 'defense':
            case 'armorBoost':
                this.stats.armor += 1;
                break;
            case 'fortune':
            case 'luckBoost':
                this.stats.luck += 0.05;
                break;
            case 'magnetism':
            case 'magnetBoost':
                this.stats.magnet += 10;
                break;
        }
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –æ—Ä—É–∂–∏—è
        this.updateWeaponStats();
    }

    updateWeaponStats() {
        if (!window.game || !window.game.weaponSystem) return;
        
        for (const weapon of window.game.weaponSystem.weapons) {
            let damage = weapon.baseDamage * this.stats.weaponDamage;
            
            // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –±–µ—Ä—Å–µ—Ä–∫ –º–Ω–æ–∂–∏—Ç–µ–ª—è
            if (this.berserkerMode && this.berserkerMultiplier) {
                damage *= this.berserkerMultiplier;
            }
            
            weapon.damage = damage;
            weapon.fireRate = weapon.baseFireRate * this.stats.weaponSpeed;
            
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è range
            if (weapon.baseRange === undefined) {
                weapon.baseRange = weapon.range;
            }
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è range –º–Ω–æ–∂–∏—Ç–µ–ª—å–Ω–æ (10-15% –∑–∞ —É—Ä–æ–≤–µ–Ω—å)
            const rangeMultiplier = 1 + (this.stats.range || 0);
            weapon.range = weapon.baseRange * rangeMultiplier;
        }
    }

    addWeapon(weaponClass) {
        if (!window.game || !window.game.weaponSystem) return;
        
        const weapon = window.game.weaponSystem.addWeapon(weaponClass, this);
        weapon.baseDamage = weapon.damage;
        weapon.baseFireRate = weapon.fireRate;
        this.updateWeaponStats();
        
        return weapon;
    }

    getAvailableUpgrades() {
        const upgrades = [
            {
                type: 'vitality',
                name: '–ñ–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞',
                description: '+10 –∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é',
                icon: '‚ù§Ô∏è'
            },
            {
                type: 'agility',
                name: '–õ–æ–≤–∫–æ—Å—Ç—å',
                description: '+15 –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –¥–≤–∏–∂–µ–Ω–∏—è',
                icon: 'üèÉ'
            },
            {
                type: 'recovery',
                name: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ',
                description: '+0.5 –∫ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–¥–æ—Ä–æ–≤—å—è –≤ —Å–µ–∫—É–Ω–¥—É',
                icon: 'üîÑ'
            },
            {
                type: 'damage',
                name: '–ú–æ—â—å',
                description: '+8% –∫ —É—Ä–æ–Ω—É –æ—Ä—É–∂–∏—è',
                icon: '‚öîÔ∏è'
            },
            {
                type: 'swiftness',
                name: '–ë—ã—Å—Ç—Ä–æ—Ç–∞',
                description: '+8% –∫ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏',
                icon: '‚ö°'
            },
            {
                type: 'defense',
                name: '–ó–∞—â–∏—Ç–∞',
                description: '+1 –∫ –±—Ä–æ–Ω–µ',
                icon: 'üõ°Ô∏è'
            },
            {
                type: 'fortune',
                name: '–£–¥–∞—á–∞',
                description: '+5% –∫ –ø–æ–ª—É—á–µ–Ω–∏—é –æ–ø—ã—Ç–∞',
                icon: 'üçÄ'
            },
            {
                type: 'magnetism',
                name: '–ú–∞–≥–Ω–µ—Ç–∏–∑–º',
                description: '+10 –∫ —Ä–∞–¥–∏—É—Å—É —Å–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤',
                icon: 'üß≤'
            }
        ];

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –≤–∏–¥–æ–≤ –æ—Ä—É–∂–∏—è
        if (window.game && window.game.weaponSystem) {
            const weaponTypes = window.game.weaponSystem.availableWeapons;
            const currentWeapons = window.game.weaponSystem.weapons.length;
            
            if (currentWeapons < 6) {
                const availableWeapons = weaponTypes.filter(weaponType => {
                    return !window.game.weaponSystem.weapons.some(weapon => 
                        weapon.constructor === weaponType
                    );
                });
                
                for (const weaponType of availableWeapons.slice(0, 2)) {
                    const weapon = new weaponType(this);
                    upgrades.push({
                        type: 'newWeapon',
                        weaponClass: weaponType,
                        name: weapon.name,
                        description: weapon.description,
                        icon: 'üî´'
                    });
                }
            }
        }

        // –£–ª—É—á—à–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ—Ä—É–∂–∏—è
        if (window.game && window.game.weaponSystem) {
            for (const weapon of window.game.weaponSystem.weapons) {
                if (weapon.level < 10) {
                    upgrades.push({
                        type: 'weaponUpgrade',
                        weapon: weapon,
                        name: `–£–ª—É—á—à–∏—Ç—å ${weapon.name}`,
                        description: `–£—Ä–æ–≤–µ–Ω—å ${weapon.level} ‚Üí ${weapon.level + 1}`,
                        icon: '‚¨ÜÔ∏è'
                    });
                }
            }
        }

        // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä 3 —É–ª—É—á—à–µ–Ω–∏–π
        const shuffled = upgrades.sort(() => Math.random() - 0.5);
        return shuffled.slice(0, 3);
    }

    getHealthPercent() {
        return this.health / this.stats.maxHealth;
    }

    getExperiencePercent() {
        return Math.floor(this.experience) / this.experienceToNext;
    }

    getStats() {
        return {
            level: this.level,
            health: this.health,
            maxHealth: this.stats.maxHealth,
            experience: Math.floor(this.experience),
            experienceToNext: this.experienceToNext,
            speed: this.stats.speed,
            regeneration: this.stats.regeneration,
            weaponDamage: this.stats.weaponDamage,
            weaponSpeed: this.stats.weaponSpeed,
            armor: this.stats.armor,
            luck: this.stats.luck,
            magnet: this.stats.magnet,
            characterClass: this.characterClass ? this.characterClass.name : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        };
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
    addVisualEffect(effectType, duration) {
        if (!this.visualEffects[effectType]) return;
        
        this.visualEffects[effectType].active = true;
        this.visualEffects[effectType].timeLeft = duration;
        
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç ${effectType} –Ω–∞ ${duration} —Å–µ–∫—É–Ω–¥`);
    }
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
    updateVisualEffects(deltaTime) {
        Object.keys(this.visualEffects).forEach(effectType => {
            const effect = this.visualEffects[effectType];
            
            if (effect.active) {
                effect.timeLeft -= deltaTime;
                
                if (effect.timeLeft <= 0) {
                    effect.active = false;
                    console.log(`–í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç ${effectType} –∑–∞–∫–æ–Ω—á–∏–ª—Å—è`);
                }
            }
        });
    }
    
    reset() {
        this.x = window.innerWidth / 2;
        this.y = window.innerHeight / 2;
        this.velX = 0;
        this.velY = 0;
        this.level = 1;
        this.experience = 0;
        this.experienceToNext = 100;
        this.active = true;
        this.invulnerable = false;
        this.invulnerabilityTime = 0;
        this.flashTime = 0;
        this.animationTime = 0;
        this.lastRegen = 0;
        this.berserkerMultiplier = 1;
        
        // –°–±—Ä–æ—Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∫ –±–∞–∑–æ–≤—ã–º –∑–Ω–∞—á–µ–Ω–∏—è–º –∫–ª–∞—Å—Å–∞
        if (this.characterClass) {
            this.characterClass.applyToPlayer(this);
        } else {
            this.stats = {
                maxHealth: 100,
                speed: 720,
                regeneration: 0,
                weaponDamage: 1,
                weaponSpeed: 1,
                armor: 0,
                luck: 0,
                magnet: 0
            };
            this.health = this.stats.maxHealth;
        }
        
        // –°–±—Ä–æ—Å —É–ª—É—á—à–µ–Ω–∏–π
        this.upgrades = {
            vitality: 0,
            agility: 0,
            damage: 0,
            defense: 0,
            recovery: 0,
            fortune: 0,
            magnetism: 0,
            swiftness: 0,
            precision: 0,
            vampirism: 0,
            multishot: 0,
            explosive: 0,
            thorns: 0,
            dodge: 0,
            piercing: 0,
            velocity: 0,
            goldRush: 0,
            berserk: 0,
            frost: 0,
            poison: 0,
            shielding: 0,
            timeWarp: 0,
            weaponSlots: 0,
            rangeBoost: 0,
            adrenaline: 0,
            ricochet: 0,
            elementalDamage: 0,
            vampiricAura: 0
        };
        
        // –°–±—Ä–æ—Å –≤–∏–∑—É–∞–ª—å–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤
        Object.keys(this.visualEffects).forEach(key => {
            this.visualEffects[key].active = false;
            this.visualEffects[key].timeLeft = 0;
        });
    }
}

// –ö–ª–∞—Å—Å –±–æ–Ω—É—Å–∞ (PowerUp)
class PowerUp {
    constructor(x, y, type) {
        this.x = x;
        this.y = y;
        this.active = true;
        this.type = type; // "magnet", "nuke", "invincibility"
        this.size = 25;
        this.collectRadius = 50;
        this.animationTime = 0;
        this.pulseAmount = 5;
        this.glowIntensity = 0;
        this.rotationAngle = 0;
        this.duration = 10; // –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch(this.type) {
            case "magnet":
                this.color = '#3498db'; // –°–∏–Ω–∏–π
                this.icon = 'üß≤';
                this.name = '–ú–∞–≥–Ω–∏—Ç –æ–ø—ã—Ç–∞';
                this.description = '–ü—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –≤–µ—Å—å –æ–ø—ã—Ç –Ω–∞ –∫–∞—Ä—Ç–µ';
                break;
            case "nuke":
                this.color = '#e74c3c'; // –ö—Ä–∞—Å–Ω—ã–π
                this.icon = 'üí•';
                this.name = '–ú–µ–≥–∞-–±–æ–º–±–∞';
                this.description = '–£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 800px';
                break;
            case "invincibility":
                this.color = '#f1c40f'; // –ñ—ë–ª—Ç—ã–π
                this.icon = '‚≠ê';
                this.name = '–ù–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å';
                this.description = '–í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å –∏ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–Ω';
                break;
            default:
                this.color = '#2ecc71'; // –ó–µ–ª—ë–Ω—ã–π
                this.icon = '‚ùì';
                this.name = '–ë–æ–Ω—É—Å';
                this.description = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±–æ–Ω—É—Å';
        }
    }

    update(deltaTime, player) {
        if (!this.active) return;

        this.animationTime += deltaTime;
        this.glowIntensity = Math.sin(this.animationTime * 3) * 0.5 + 0.5;
        this.rotationAngle += deltaTime * 2; // –í—Ä–∞—â–µ–Ω–∏–µ

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–±–æ—Ä –∏–≥—Ä–æ–∫–æ–º
        if (player) {
            const distance = MathUtils.distance(this.x, this.y, player.x, player.y);
            if (distance <= this.collectRadius) {
                this.collect(player);
            }
        }
    }

    render(ctx) {
        if (!this.active) return;

        ctx.save();
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
        ctx.shadowColor = this.color;
        ctx.shadowBlur = 15 + this.glowIntensity * 10;

        // –ü—É–ª—å—Å–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
        const pulseSize = this.size + Math.sin(this.animationTime * 3) * this.pulseAmount;
        
        // –í—Ä–∞—â–µ–Ω–∏–µ –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        ctx.translate(this.x, this.y);
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–æ–¥—Å–∫–∞–∑–∫–∏ "–ù–∞–∂–º–∏—Ç–µ E –¥–ª—è —Å–±–æ—Ä–∞" –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ —Ä—è–¥–æ–º
        if (window.game && window.game.player) {
            const distance = MathUtils.distance(this.x, this.y, window.game.player.x, window.game.player.y);
            if (distance <= this.collectRadius * 2) {
                ctx.save();
                ctx.rotate(0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
                ctx.fillStyle = '#ffffff';
                ctx.font = '14px Arial';
                ctx.textAlign = 'center';
                ctx.textBaseline = 'bottom';
                
                // –¢–µ–∫—Å—Ç —Å —Ç–µ–Ω—å—é –¥–ª—è –ª—É—á—à–µ–π –≤–∏–¥–∏–º–æ—Å—Ç–∏
                ctx.shadowColor = '#000000';
                ctx.shadowBlur = 4;
                ctx.shadowOffsetX = 1;
                ctx.shadowOffsetY = 1;
                
                // –ü—É–ª—å—Å–∏—Ä—É—é—â–∏–π —Ç–µ–∫—Å—Ç
                const textScale = 1 + Math.sin(this.animationTime * 4) * 0.1;
                ctx.scale(textScale, textScale);
                
                ctx.fillText('–ù–∞–∂–º–∏—Ç–µ E –¥–ª—è —Å–±–æ—Ä–∞', 0, -pulseSize - 10);
                ctx.restore();
            }
        }
        
        // –í—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è —Å–∞–º–æ–≥–æ –±–æ–Ω—É—Å–∞
        ctx.rotate(this.rotationAngle);
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ñ–æ–Ω–∞ –±–æ–Ω—É—Å–∞
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(0, 0, pulseSize / 2, 0, Math.PI * 2);
        ctx.fill();
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–∫–æ–Ω–∫–∏
        ctx.fillStyle = '#ffffff';
        ctx.font = `${pulseSize * 0.6}px Arial`;
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.fillText(this.icon, 0, 0);
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–æ–Ω—É—Å–∞ –ø–æ–¥ –∏–∫–æ–Ω–∫–æ–π
        ctx.save();
        ctx.rotate(-this.rotationAngle); // –û—Ç–º–µ–Ω—è–µ–º –≤—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        ctx.font = '12px Arial';
        ctx.fillText(this.name, 0, pulseSize);
        ctx.restore();
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞–¥–∏—É—Å–∞ —Å–±–æ—Ä–∞ (–≤ —Ä–µ–∂–∏–º–µ –æ—Ç–ª–∞–¥–∫–∏)
        if (window.game && window.game.debug) {
            ctx.strokeStyle = this.color + '33';
            ctx.beginPath();
            ctx.arc(0, 0, this.collectRadius, 0, Math.PI * 2);
            ctx.stroke();
        }
        
        ctx.restore();
    }

    collect(player) {
        if (!this.active || !player || !window.game) return;
        
        this.active = false;
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–±–æ—Ä–∞
        if (window.game.particleSystem) {
            window.game.particleSystem.createExplosion(this.x, this.y, 20, this.color);
        }
        
        // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        switch(this.type) {
            case "magnet":
                this.applyMagnetEffect(player);
                break;
            case "nuke":
                this.applyNukeEffect(player);
                break;
            case "invincibility":
                this.applyInvincibilityEffect(player);
                break;
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–±–æ—Ä–µ –±–æ–Ω—É—Å–∞
        window.game.showPowerUpMessage(this);
    }
    
    // –ü—Ä–∏—Ç—è–≥–∏–≤–∞–µ—Ç –≤–µ—Å—å –æ–ø—ã—Ç –Ω–∞ –∫–∞—Ä—Ç–µ –∫ –∏–≥—Ä–æ–∫—É
    applyMagnetEffect(player) {
        if (!window.game || !window.game.itemSystem) return;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        window.game.particleSystem.createMagnetEffect(player.x, player.y);
        
        // –ü—Ä–∏—Ç—è–≥–∏–≤–∞–µ–º –≤—Å–µ —Å—Ñ–µ—Ä—ã –æ–ø—ã—Ç–∞ –∫ –∏–≥—Ä–æ–∫—É
        const experienceOrbs = window.game.itemSystem.items.filter(item => item.type === 'experience');
        experienceOrbs.forEach(orb => {
            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ–∫—É—é —Å–∫–æ—Ä–æ—Å—Ç—å –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è –∫ –∏–≥—Ä–æ–∫—É
            orb.magnetSpeed = 1000;
            orb.magnetTarget = player;
            orb.magnetized = true;
        });
        
        console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç –º–∞–≥–Ω–∏—Ç–∞: –ø—Ä–∏—Ç—è–Ω—É—Ç–æ ${experienceOrbs.length} —Å—Ñ–µ—Ä –æ–ø—ã—Ç–∞`);
    }
    
    // –£–Ω–∏—á—Ç–æ–∂–∞–µ—Ç –≤—Å–µ—Ö –≤—Ä–∞–≥–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ 800px
    applyNukeEffect(player) {
        if (!window.game || !window.game.enemySystem) return;
        
        const nukeRadius = 800;
        let killCount = 0;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –≤–∑—Ä—ã–≤–∞
        window.game.particleSystem.createNukeEffect(player.x, player.y, nukeRadius);
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —É—Ä–æ–Ω –∫–æ –≤—Å–µ–º –≤—Ä–∞–≥–∞–º –≤ —Ä–∞–¥–∏—É—Å–µ
        const enemies = window.game.enemySystem.enemies.filter(enemy => {
            const distance = MathUtils.distance(player.x, player.y, enemy.x, enemy.y);
            return distance <= nukeRadius;
        });
        
        enemies.forEach(enemy => {
            enemy.takeDamage(enemy.health * 10, player); // –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–±–∏–π—Å—Ç–≤–æ
            killCount++;
        });
        
        // –í–∏–±—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞
        if (window.game.shakeCamera) {
            window.game.shakeCamera(20, 1);
        }
        
        console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç –º–µ–≥–∞-–±–æ–º–±—ã: —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ ${killCount} –≤—Ä–∞–≥–æ–≤`);
    }
    
    // –í—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å –∏ –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–Ω
    applyInvincibilityEffect(player) {
        if (!player) return;
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å
        player.invincible = true;
        player.invincibleTime = this.duration;
        
        // –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–≤—ã—à–∞–µ–º —É—Ä–æ–Ω
        player.damageMultiplier = (player.damageMultiplier || 1) * 2;
        
        // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        player.addVisualEffect('invincibility', this.duration);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        setTimeout(() => {
            player.invincible = false;
            player.damageMultiplier = (player.damageMultiplier || 2) / 2;
            console.log('–≠—Ñ—Ñ–µ–∫—Ç –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è');
        }, this.duration * 1000);
        
        console.log(`–ü—Ä–∏–º–µ–Ω–µ–Ω —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–∞ ${this.duration} —Å–µ–∫—É–Ω–¥`);
    }
}

// –ö–ª–∞—Å—Å —Å—É–Ω–¥—É–∫–∞ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ (–≤—ã–ø–∞–¥–∞–µ—Ç –æ—Ç –±–æ—Å—Å–∞)
class TreasureChest {
    constructor(x, y) {
        this.x = x;
        this.y = y;
        this.active = true;
        this.size = 30;
        this.color = '#ffcc00'; // –ó–æ–ª–æ—Ç–æ–π —Ü–≤–µ—Ç
        this.collectRadius = 50;
        this.animationTime = 0;
        this.pulseAmount = 5;
        this.upgradeCount = 3; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ª—É—á—à–µ–Ω–∏–π
        this.glowIntensity = 0;
    }

    update(deltaTime, player) {
        if (!this.active) return;

        this.animationTime += deltaTime;
        this.glowIntensity = Math.sin(this.animationTime * 3) * 0.5 + 0.5;

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–±–æ—Ä –∏–≥—Ä–æ–∫–æ–º
        if (player) {
            const distance = MathUtils.distance(this.x, this.y, player.x, player.y);
            if (distance <= this.collectRadius) {
                this.collect(player);
            }
        }
    }

    render(ctx) {
        if (!this.active) return;

        ctx.save();
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è –≤–æ–∫—Ä—É–≥ —Å—É–Ω–¥—É–∫–∞
        ctx.shadowColor = '#ffcc00';
        ctx.shadowBlur = 15 + this.glowIntensity * 10;

        // –ü—É–ª—å—Å–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞
        const pulseSize = this.size + Math.sin(this.animationTime * 3) * this.pulseAmount;
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å—É–Ω–¥—É–∫–∞
        ctx.fillStyle = this.color;
        ctx.fillRect(
            this.x - pulseSize / 2,
            this.y - pulseSize / 2,
            pulseSize,
            pulseSize
        );
        
        // –î–µ—Ç–∞–ª–∏ —Å—É–Ω–¥—É–∫–∞
        ctx.fillStyle = '#996600';
        ctx.fillRect(
            this.x - pulseSize / 2,
            this.y - pulseSize / 4,
            pulseSize,
            pulseSize / 10
        );
        
        // –ó–∞–º–æ–∫ —Å—É–Ω–¥—É–∫–∞
        ctx.fillStyle = '#663300';
        ctx.fillRect(
            this.x - pulseSize / 10,
            this.y - pulseSize / 4,
            pulseSize / 5,
            pulseSize / 5
        );
        
        // –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ä–∞–¥–∏—É—Å–∞ —Å–±–æ—Ä–∞
        if (window.game && window.game.debug) {
            ctx.strokeStyle = '#ffcc0033';
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.collectRadius, 0, Math.PI * 2);
            ctx.stroke();
        }

        // –¢–µ–∫—Å—Ç –ø–æ–¥—Å–∫–∞–∑–∫–∏ "Collect"
        ctx.fillStyle = '#ffffff';
        ctx.font = '12px Arial';
        ctx.textAlign = 'center';
        ctx.fillText('Collect', this.x, this.y - pulseSize / 2 - 10);

        ctx.restore();
    }

    collect(player) {
        if (!this.active) return;
        
        this.active = false;
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–±–æ—Ä–∞
        if (window.game && window.game.particleSystem) {
            window.game.particleSystem.createExplosion(this.x, this.y, 20, '#ffcc00');
        }
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —É–ª—É—á—à–µ–Ω–∏–π
        if (window.game) {
            window.game.showChestUpgradeMenu(this.upgradeCount);
        }
    }
}

// –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
class ItemSystem {
    constructor() {
        this.items = [];
        this.chests = []; // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Å—É–Ω–¥—É–∫–æ–≤
        this.itemPool = new ObjectPool(
            () => new ExperienceOrb(0, 0, 0),
            (item) => item.reset(),
            75 // –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 50 –¥–æ 75 –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        );
    }

    spawnExperienceOrb(x, y, value) {
        // –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
        const roundedValue = Math.floor(value);
        const orb = this.itemPool.get();
        orb.init(x, y, roundedValue);
        this.items.push(orb);
    }
    
    spawnChest(x, y) {
        const chest = new TreasureChest(x, y);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–æ—Å—Ç—É–ø –∫ enemySystem —á–µ—Ä–µ–∑ window.game
        if (window.game && window.game.enemySystem) {
            window.game.enemySystem.chests.push(chest);
            console.log('–°—É–Ω–¥—É–∫ —Å —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏ –ø–æ—è–≤–∏–ª—Å—è –Ω–∞ –∫–∞—Ä—Ç–µ!');
        } else {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ enemySystem –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—É–Ω–¥—É–∫–∞');
            // Fallback - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
            this.chests.push(chest);
        }
        
        return chest;
    }

    update(deltaTime) {
        // –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä–æ–∫–∞
        const player = window.game ? window.game.player : null;
        
        for (let i = this.items.length - 1; i >= 0; i--) {
            const item = this.items[i];
            
            // –ü–µ—Ä–µ–¥–∞–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –º–µ—Ç–æ–¥ update –¥–ª—è PowerUp
            if (item instanceof PowerUp) {
                item.update(deltaTime, player);
            } else {
                item.update(deltaTime);
            }
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            if (!item.active) {
                this.items.splice(i, 1);
                if (item.type === 'experience') {
                    this.itemPool.release(item);
                }
                continue;
            }
            
            // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –¥–∞–ª–µ–∫–æ –æ—Ç –∏–≥—Ä–æ–∫–∞ (–¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è)
            // –£–≤–µ–ª–∏—á–µ–Ω–∞ –¥–∏—Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–∞–ª—å–Ω–æ–±–æ–π–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
            // –ù–ï —É–¥–∞–ª—è–µ–º –±–æ–Ω—É—Å—ã (PowerUp), —Ç–æ–ª—å–∫–æ —Å—Ñ–µ—Ä—ã –æ–ø—ã—Ç–∞ –∏ –¥—Ä—É–≥–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã  
            if (!(item instanceof PowerUp) && window.game && window.game.player) {
                const distance = MathUtils.distance(item.x, item.y, window.game.player.x, window.game.player.y);
                if (distance > 5000) {
                    item.active = false;
                    this.items.splice(i, 1);
                    this.itemPool.release(item);
                }
            }
        }
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
        // –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã - –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –±–æ–Ω—É—Å—ã –∏ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã –æ–ø—ã—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏
        const nonPowerUps = this.items.filter(item => !(item instanceof PowerUp));
        
        if (nonPowerUps.length > 80) { // –£–º–µ–Ω—å—à–µ–Ω–æ —Å 100 –¥–æ 80
            console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å—Ñ–µ—Ä –æ–ø—ã—Ç–∞, –±—ã–ª–æ:', nonPowerUps.length);
            // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ –¥–∞–ª—å–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ –ø—Ä–µ–¥–º–µ—Ç—ã
            if (window.game && window.game.player) {
                const player = window.game.player;
                
                // –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µPowerUp –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é –æ—Ç –∏–≥—Ä–æ–∫–∞
                nonPowerUps.sort((a, b) => {
                    const distA = MathUtils.distance(a.x, a.y, player.x, player.y);
                    const distB = MathUtils.distance(b.x, b.y, player.x, player.y);
                    return distB - distA;
                });
                
                // –£–¥–∞–ª—è–µ–º –¥–∞–ª—å–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã (—Å–æ—Ö—Ä–∞–Ω—è—è 40)
                const itemsToRemove = nonPowerUps.slice(40); // –û—Å—Ç–∞–≤–ª—è–µ–º 40 –±–ª–∏–∂–∞–π—à–∏—Ö
                
                // –£–¥–∞–ª—è–µ–º —ç—Ç–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
                itemsToRemove.forEach(item => {
                    const index = this.items.indexOf(item);
                    if (index !== -1) {
                        this.items.splice(index, 1);
                        item.active = false;
                        if (item.type === 'experience') {
                            this.itemPool.release(item);
                        }
                    }
                });
            }
            console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –æ—Å—Ç–∞–ª–æ—Å—å –±–µ–∑ —É—á–µ—Ç–∞ –±–æ–Ω—É—Å–æ–≤:', 
                this.items.filter(item => !(item instanceof PowerUp)).length);
        }
    }

    render(ctx) {
        for (const item of this.items) {
            item.render(ctx);
        }
    }

    getItemsInRange(x, y, range) {
        return this.items.filter(item => {
            const distance = MathUtils.distance(x, y, item.x, item.y);
            return distance <= range && item.active;
        });
    }

    clear() {
        this.items = [];
        this.itemPool.clear();
    }
}

// –°—Ñ–µ—Ä–∞ –æ–ø—ã—Ç–∞
class ExperienceOrb {
    constructor(x, y, value) {
        this.x = x;
        this.y = y;
        this.value = value;
        this.active = false;
        this.size = 8;
        this.color = '#00ff00';
        this.attractionRadius = 100;
        this.attractionSpeed = 200;
        this.animationTime = 0;
        this.velX = 0;
        this.velY = 0;
        this.magnetized = false;
        this.lifetime = 30;
        this.maxLifetime = 30;
    }

    init(x, y, value) {
        this.x = x;
        this.y = y;
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
        this.value = Math.floor(value);
        this.active = true;
        this.animationTime = 0;
        this.velX = MathUtils.random(-50, 50);
        this.velY = MathUtils.random(-50, 50);
        this.magnetized = false;
        this.lifetime = this.maxLifetime;
        
        // –†–∞–∑–º–µ—Ä –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
        this.size = Math.max(4, Math.min(12, 4 + this.value / 2));
        
        // –¶–≤–µ—Ç –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–Ω–∞—á–µ–Ω–∏—è
        if (this.value >= 20) {
            this.color = '#ff6600';
        } else if (this.value >= 10) {
            this.color = '#0066ff';
        } else {
            this.color = '#00ff00';
        }
    }

    update(deltaTime) {
        if (!this.active) return;

        this.animationTime += deltaTime;
        
        // –£–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏
        this.lifetime -= deltaTime;
        if (this.lifetime <= 0) {
            this.active = false;
            console.log('–°—Ñ–µ—Ä–∞ –æ–ø—ã—Ç–∞ —É–¥–∞–ª–µ–Ω–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏—è –∫ –∏–≥—Ä–æ–∫—É
        if (window.game && window.game.player) {
            const player = window.game.player;
            const distance = MathUtils.distance(this.x, this.y, player.x, player.y);
            const totalRadius = this.attractionRadius + player.stats.magnet;
            
            if (distance <= totalRadius) {
                this.magnetized = true;
                
                // –î–≤–∏–∂–µ–Ω–∏–µ –∫ –∏–≥—Ä–æ–∫—É
                const dx = player.x - this.x;
                const dy = player.y - this.y;
                const normalizedX = dx / distance;
                const normalizedY = dy / distance;
                
                this.velX = normalizedX * this.attractionSpeed;
                this.velY = normalizedY * this.attractionSpeed;
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        this.x += this.velX * deltaTime;
        this.y += this.velY * deltaTime;

        // –¢—Ä–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ –Ω–∞–º–∞–≥–Ω–∏—á–µ–Ω
        if (!this.magnetized) {
            this.velX *= 0.9;
            this.velY *= 0.9;
        }
    }

    render(ctx) {
        if (!this.active) return;

        ctx.save();
        
        // –≠—Ñ—Ñ–µ–∫—Ç –ø—É–ª—å—Å–∞—Ü–∏–∏
        const pulse = 1 + Math.sin(this.animationTime * 8) * 0.1;
        const currentSize = this.size * pulse;
        
        // –≠—Ñ—Ñ–µ–∫—Ç –º–µ—Ä—Ü–∞–Ω–∏—è –ø—Ä–∏ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –∫–æ–Ω—Ü—É –∂–∏–∑–Ω–∏
        let alpha = 1;
        if (this.lifetime < 5) {
            alpha = 0.5 + 0.5 * Math.sin(this.animationTime * 10);
        }
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–≤–µ—á–µ–Ω–∏—è
        ctx.shadowColor = this.color;
        ctx.shadowBlur = 10;
        ctx.globalAlpha = alpha;
        
        ctx.fillStyle = this.color;
        ctx.beginPath();
        ctx.arc(this.x, this.y, currentSize / 2, 0, Math.PI * 2);
        ctx.fill();
        
        // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥
        ctx.shadowBlur = 0;
        ctx.fillStyle = '#ffffff';
        ctx.beginPath();
        ctx.arc(this.x, this.y, currentSize / 4, 0, Math.PI * 2);
        ctx.fill();
        
        ctx.restore();
    }

    collect(player) {
        if (!this.active) return;
        
        this.active = false;
        // –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ –¥–æ —Ü–µ–ª–æ–≥–æ —á–∏—Å–ª–∞
        const expValue = Math.floor(this.value);
        player.gainExperience(expValue);
        
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–æ–ª–æ—Ç–∞ –∑–∞ —Å–±–æ—Ä
        const goldAmount = Math.max(1, Math.floor(this.value / 250)); // –£–º–µ–Ω—å—à–µ–Ω–æ –≤ 50 —Ä–∞–∑ (–±—ã–ª–æ / 5)
            window.game.goldSystem.addGold(goldAmount);
        
        // –≠—Ñ—Ñ–µ–∫—Ç —Å–±–æ—Ä–∞
        if (window.game && window.game.particleSystem) {
            window.game.particleSystem.createSparks(this.x, this.y);
        }
    }

    reset() {
        this.active = false;
        this.magnetized = false;
        this.velX = 0;
        this.velY = 0;
        this.animationTime = 0;
        this.lifetime = this.maxLifetime;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –∫–ª–∞—Å—Å–æ–≤
window.CharacterClass = CharacterClass;
window.ArcherClass = ArcherClass;
window.SwordsmanClass = SwordsmanClass;
window.BomberClass = BomberClass;
window.SwordWeapon = SwordWeapon;
window.SwordSlashEffect = SwordSlashEffect;
window.SwordProjectile = SwordProjectile;
window.GoldSystem = GoldSystem;
window.PermanentUpgradesSystem = PermanentUpgradesSystem;
window.Player = Player;
window.ItemSystem = ItemSystem;
window.ExperienceOrb = ExperienceOrb; 